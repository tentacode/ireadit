security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api:
            # lazy: true
            pattern: ^/api
            context: main
            # stateless: false
            # anonymous: true
            # guard:
            #     authenticators:
            #         - App\Security\ApiAuthenticator
            provider: app_user_provider


            # form_login:
            #     login_path: request_magic_link
            #     check_path: request_magic_link
        main:
            lazy: true
            provider: app_user_provider

            form_login:
                login_path: request_magic_link
                check_path: request_magic_link

            logout:
                path: logout
                target: landing

            login_link:
                login_path: request_magic_link
                check_route: check_link
                signature_properties: ['uuid']
                lifetime: 600 # 10 minutes
                max_uses: 3

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api, roles: ROLE_USER }
        - { path: ^/account, roles: ROLE_USER }
        - { path: ^/, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
